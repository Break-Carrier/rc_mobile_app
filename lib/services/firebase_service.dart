import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/foundation.dart';
import 'dart:async';
import '../firebase_options.dart';
import '../utils/map_converter.dart';

/// Service de base pour la communication avec Firebase Realtime Database
class FirebaseService {
  final FirebaseDatabase _database = FirebaseDatabase.instance;

  /// R√©f√©rence √† la base de donn√©es
  DatabaseReference get databaseRef => _database.ref();

  /// Indique si le service est connect√©
  bool _isConnected = false;
  bool get isConnected => _isConnected;

  /// √âcouteur d'√©tat de connexion
  StreamSubscription? _connectedSubscription;

  /// Initialise le service et √©coute les changements de connectivit√©
  Future<void> initialize() async {
    try {
      // V√©rifier que la configuration est valide
      if (!DefaultFirebaseOptions.isConfigValid()) {
        throw Exception(
            'Configuration Firebase invalide. V√©rifiez vos variables d\'environnement.');
      }

      // Configurer l'URL de la base de donn√©es
      final options = DefaultFirebaseOptions.currentPlatform;
      if (options.databaseURL?.isNotEmpty ?? false) {
        debugPrint(
            'üìä Utilisation de l\'URL de base de donn√©es: ${options.databaseURL}');
        _database.databaseURL = options.databaseURL;
      } else {
        throw Exception('URL de la base de donn√©es Firebase manquante.');
      }

      // √âcouter l'√©tat de connectivit√© √† Firebase
      _connectedSubscription =
          _database.ref('.info/connected').onValue.listen((event) {
        _isConnected = event.snapshot.value as bool? ?? false;
        debugPrint(
            'üîå Firebase Connectivity: ${_isConnected ? 'Connected' : 'Disconnected'}');
      }, onError: (error) {
        debugPrint('‚ùå Erreur de connexion Firebase: $error');
        _isConnected = false;
      });

      // Configurer la persistence (seulement pour les plateformes non-web)
      if (!kIsWeb) {
        _database.setPersistenceEnabled(true);
        _database.setPersistenceCacheSizeBytes(10000000); // ~10MB
      }

      debugPrint('‚úÖ Service Firebase initialis√© avec succ√®s');
    } catch (e) {
      debugPrint('‚ùå Erreur d\'initialisation du service Firebase: $e');
      _isConnected = false;
      rethrow;
    }
  }

  /// √âcrit des donn√©es √† un chemin sp√©cifique
  Future<void> setData(String path, Map<String, dynamic> data) async {
    try {
      await _database.ref(path).set(data);
      debugPrint('‚úÖ Donn√©es d√©finies √† $path');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©finition des donn√©es √† $path: $e');
      rethrow;
    }
  }

  /// Met √† jour des donn√©es √† un chemin sp√©cifique
  Future<void> updateData(String path, Map<String, dynamic> data) async {
    try {
      await _database.ref(path).update(data);
      debugPrint('‚úÖ Donn√©es mises √† jour √† $path');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la mise √† jour des donn√©es √† $path: $e');
      rethrow;
    }
  }

  /// R√©cup√®re des donn√©es une fois depuis un chemin sp√©cifique
  Future<Map<String, dynamic>?> getData(String path) async {
    try {
      final snapshot = await _database.ref(path).get();
      if (snapshot.exists) {
        // Conversion s√©curis√©e de Map<Object?, Object?> en Map<String, dynamic>
        if (snapshot.value is Map) {
          final rawData = snapshot.value as Map<Object?, Object?>;
          return MapConverter.convertToStringDynamicMap(rawData);
        } else {
          debugPrint('‚ö†Ô∏è Les donn√©es √† $path ne sont pas au format Map');
          return null;
        }
      } else {
        debugPrint('‚ö†Ô∏è Aucune donn√©e disponible √† $path');
        return null;
      }
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la r√©cup√©ration des donn√©es de $path: $e');
      rethrow;
    }
  }

  /// √âcoute les changements √† un chemin sp√©cifique
  Stream<DatabaseEvent> getDataStream(String path) {
    return _database.ref(path).onValue;
  }

  /// R√©cup√®re les derni√®res entr√©es d'une collection limit√©e √† un nombre sp√©cifique
  Future<Map<String, dynamic>?> getLatestEntries(String path, int limit) async {
    try {
      final query =
          _database.ref(path).orderByChild('timestamp').limitToLast(limit);

      final snapshot = await query.get();
      if (snapshot.exists) {
        // Conversion s√©curis√©e de Map<Object?, Object?> en Map<String, dynamic>
        if (snapshot.value is Map) {
          final rawData = snapshot.value as Map<Object?, Object?>;
          return MapConverter.convertToStringDynamicMap(rawData);
        } else {
          debugPrint('‚ö†Ô∏è Les donn√©es √† $path ne sont pas au format Map');
          return null;
        }
      } else {
        debugPrint('‚ö†Ô∏è Aucune donn√©e disponible √† $path');
        return null;
      }
    } catch (e) {
      debugPrint(
          '‚ùå Erreur lors de la r√©cup√©ration des derni√®res entr√©es de $path: $e');
      rethrow;
    }
  }

  /// √âcoute les derni√®res entr√©es d'une collection limit√©e √† un nombre sp√©cifique
  Stream<DatabaseEvent> getLatestEntriesStream(String path, int limit) {
    final query =
        _database.ref(path).orderByChild('timestamp').limitToLast(limit);

    return query.onValue;
  }

  /// Ajoute une nouvelle entr√©e √† une collection et retourne la cl√© g√©n√©r√©e
  Future<String?> pushData(String path, Map<String, dynamic> data) async {
    try {
      final newRef = _database.ref(path).push();
      await newRef.set(data);
      debugPrint('‚úÖ Donn√©es ajout√©es √† $path avec la cl√© ${newRef.key}');
      return newRef.key;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de l\'ajout de donn√©es √† $path: $e');
      rethrow;
    }
  }

  /// Supprime des donn√©es √† un chemin sp√©cifique
  Future<void> deleteData(String path) async {
    try {
      await _database.ref(path).remove();
      debugPrint('‚úÖ Donn√©es supprim√©es √† $path');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la suppression des donn√©es √† $path: $e');
      rethrow;
    }
  }

  /// V√©rifie la connectivit√© directe √† Firebase
  Future<bool> checkDirectConnection() async {
    try {
      final ref = _database.ref('.info/connected');
      final snapshot = await ref.get();
      final isConnected = snapshot.value as bool? ?? false;
      debugPrint(
          'üîç V√©rification de connexion directe: ${isConnected ? 'Connect√©' : 'D√©connect√©'}');
      return isConnected;
    } catch (e) {
      debugPrint(
          '‚ùå Erreur lors de la v√©rification de la connexion directe: $e');
      return false;
    }
  }

  /// Lib√®re les ressources
  void dispose() {
    _connectedSubscription?.cancel();
    debugPrint('üßπ Service Firebase lib√©r√©');
  }
}
